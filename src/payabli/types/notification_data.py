# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .frequencynotification import Frequencynotification
from .methodnotification import Methodnotification
from .notification_content import NotificationContent
from .ownerid import Ownerid
from .ownertype import Ownertype
from .source import Source
from .statusnotification import Statusnotification
from .target import Target


class NotificationData(UniversalBaseModel):
    """
    Information about the notification or report configuration.
    """

    content: typing.Optional[NotificationContent] = None
    frequency: typing.Optional[Frequencynotification] = None
    method: Methodnotification
    owner_id: typing_extensions.Annotated[typing.Optional[Ownerid], FieldMetadata(alias="ownerId")] = None
    owner_type: typing_extensions.Annotated[Ownertype, FieldMetadata(alias="ownerType")]
    source: typing.Optional[Source] = None
    status: typing.Optional[Statusnotification] = None
    target: typing.Optional[Target] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
