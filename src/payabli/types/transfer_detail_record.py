# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .ach_holder_type import AchHolderType
from .ach_sec_code import AchSecCode
from .bill_data import BillData
from .billing_fee_detail import BillingFeeDetail
from .datetimenullable import Datetimenullable
from .dbaname import Dbaname
from .device import Device
from .external_paypoint_id import ExternalPaypointId
from .legalname import Legalname
from .netamountnullable import Netamountnullable
from .orderid import Orderid
from .org_parent_name import OrgParentName
from .orgid import Orgid
from .pending_fee_amount import PendingFeeAmount
from .query_c_fee_transaction import QueryCFeeTransaction
from .query_payment_data import QueryPaymentData
from .query_response_data import QueryResponseData
from .query_transaction_events import QueryTransactionEvents
from .query_transaction_payor_data import QueryTransactionPayorData
from .source import Source
from .split_funding import SplitFunding


class TransferDetailRecord(UniversalBaseModel):
    transfer_detail_id: typing_extensions.Annotated[int, FieldMetadata(alias="transferDetailId")] = pydantic.Field()
    """
    Unique identifier for the transfer detail record
    """

    transfer_id: typing_extensions.Annotated[int, FieldMetadata(alias="transferId")] = pydantic.Field()
    """
    The ID of the transfer this detail belongs to
    """

    transaction_id: typing_extensions.Annotated[str, FieldMetadata(alias="transactionId")] = pydantic.Field()
    """
    The transaction ID in Payabli's system
    """

    transaction_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="transactionNumber")] = (
        pydantic.Field(default=None)
    )
    """
    External transaction reference number
    """

    paypoint_id: typing_extensions.Annotated[int, FieldMetadata(alias="paypointId")] = pydantic.Field()
    """
    The ID of the paypoint this transaction belongs to
    """

    type: str = pydantic.Field()
    """
    The transaction type (credit or debit)
    """

    category: typing.Optional[str] = pydantic.Field(default=None)
    """
    A field used to categorize the transaction details. Values include: auth, decline, refund, adj, cb, split
    """

    gross_amount: typing_extensions.Annotated[float, FieldMetadata(alias="grossAmount")] = pydantic.Field()
    """
    The gross amount of the transaction
    """

    charge_back_amount: typing_extensions.Annotated[float, FieldMetadata(alias="chargeBackAmount")] = pydantic.Field()
    """
    Chargeback amount deducted from transaction
    """

    returned_amount: typing_extensions.Annotated[float, FieldMetadata(alias="returnedAmount")] = pydantic.Field()
    """
    ACH return amount deducted from transaction
    """

    refund_amount: typing_extensions.Annotated[float, FieldMetadata(alias="refundAmount")] = pydantic.Field()
    """
    Refund amount deducted from transaction
    """

    hold_amount: typing_extensions.Annotated[float, FieldMetadata(alias="holdAmount")] = pydantic.Field()
    """
    Amount being held for fraud or risk concerns
    """

    released_amount: typing_extensions.Annotated[float, FieldMetadata(alias="releasedAmount")] = pydantic.Field()
    """
    Previously held funds that have been released after a risk review
    """

    billing_fees_amount: typing_extensions.Annotated[float, FieldMetadata(alias="billingFeesAmount")] = pydantic.Field()
    """
    Charges applied for transactions and services
    """

    third_party_paid_amount: typing_extensions.Annotated[float, FieldMetadata(alias="thirdPartyPaidAmount")] = (
        pydantic.Field()
    )
    """
    Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.
    """

    adjustments_amount: typing_extensions.Annotated[float, FieldMetadata(alias="adjustmentsAmount")] = pydantic.Field()
    """
    Corrections applied to Billing & Fees charges
    """

    net_transfer_amount: typing_extensions.Annotated[float, FieldMetadata(alias="netTransferAmount")] = pydantic.Field()
    """
    The net amount after all deductions
    """

    split_funding_amount: typing_extensions.Annotated[float, FieldMetadata(alias="splitFundingAmount")] = (
        pydantic.Field()
    )
    """
    Total amount directed to split funding destinations
    """

    billing_fees_details: typing_extensions.Annotated[
        typing.Optional[typing.List[BillingFeeDetail]], FieldMetadata(alias="billingFeesDetails")
    ] = pydantic.Field(default=None)
    """
    Detailed breakdown of billing fees applied to the transaction
    """

    parent_org_name: typing_extensions.Annotated[
        typing.Optional[OrgParentName], FieldMetadata(alias="ParentOrgName")
    ] = pydantic.Field(default=None)
    """
    The name of the parent organization
    """

    paypoint_dbaname: typing_extensions.Annotated[typing.Optional[Dbaname], FieldMetadata(alias="PaypointDbaname")] = (
        pydantic.Field(default=None)
    )
    """
    The paypoint's DBA name
    """

    paypoint_legalname: typing_extensions.Annotated[
        typing.Optional[Legalname], FieldMetadata(alias="PaypointLegalname")
    ] = pydantic.Field(default=None)
    """
    The paypoint's legal name
    """

    paypoint_entryname: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="PaypointEntryname")] = (
        pydantic.Field(default=None)
    )
    """
    The paypoint's entryname
    """

    payment_trans_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="PaymentTransId")] = (
        pydantic.Field(default=None)
    )
    """
    The transaction ID for the payment
    """

    connector_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="ConnectorName")] = (
        pydantic.Field(default=None)
    )
    """
    The payment connector used to process the transaction
    """

    external_processor_information: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="ExternalProcessorInformation")
    ] = pydantic.Field(default=None)
    """
    Processor information, used for troubleshooting and reporting. This field contains a value when the API key used to make the request has management permissions.
    """

    gateway_trans_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="GatewayTransId")] = (
        pydantic.Field(default=None)
    )
    """
    Internal identifier used for processing
    """

    order_id: typing_extensions.Annotated[typing.Optional[Orderid], FieldMetadata(alias="OrderId")] = pydantic.Field(
        default=None
    )
    """
    Custom identifier for the transaction
    """

    method: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="Method")] = pydantic.Field(
        default=None
    )
    """
    Payment method used: card, ach, or wallet
    """

    batch_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="BatchNumber")] = (
        pydantic.Field(default=None)
    )
    """
    The batch number the transaction was included in
    """

    batch_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="BatchAmount")] = (
        pydantic.Field(default=None)
    )
    """
    The amount of the batch
    """

    payor_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="PayorId")] = pydantic.Field(
        default=None
    )
    """
    Unique ID for customer linked to the transaction
    """

    payment_data: typing_extensions.Annotated[typing.Optional[QueryPaymentData], FieldMetadata(alias="PaymentData")] = (
        pydantic.Field(default=None)
    )
    """
    Details about the payment method and transaction
    """

    trans_status: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="TransStatus")] = (
        pydantic.Field(default=None)
    )
    """
    Status of transaction. See [the docs](/developers/references/money-in-statuses#money-in-transaction-status) for a full reference.
    """

    total_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="TotalAmount")] = (
        pydantic.Field(default=None)
    )
    """
    Transaction total amount (including service fee or sub-charge)
    """

    net_amount: typing_extensions.Annotated[typing.Optional[Netamountnullable], FieldMetadata(alias="NetAmount")] = (
        pydantic.Field(default=None)
    )
    """
    Net amount paid
    """

    fee_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="FeeAmount")] = pydantic.Field(
        default=None
    )
    """
    Service fee or sub-charge applied
    """

    settlement_status: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="SettlementStatus")] = (
        pydantic.Field(default=None)
    )
    """
    Settlement status for transaction. See [the docs](/developers/references/money-in-statuses#payment-funding-status) for a full reference.
    """

    operation: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="Operation")] = pydantic.Field(
        default=None
    )
    """
    The transaction's operation
    """

    response_data: typing_extensions.Annotated[
        typing.Optional[QueryResponseData], FieldMetadata(alias="ResponseData")
    ] = pydantic.Field(default=None)
    """
    Details about the transaction response
    """

    source: typing_extensions.Annotated[typing.Optional[Source], FieldMetadata(alias="Source")] = pydantic.Field(
        default=None
    )
    """
    Custom identifier to indicate the transaction or request source
    """

    schedule_reference: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="ScheduleReference")] = (
        pydantic.Field(default=None)
    )
    """
    Reference to the subscription or schedule that originated the transaction
    """

    org_id: typing_extensions.Annotated[typing.Optional[Orgid], FieldMetadata(alias="OrgId")] = pydantic.Field(
        default=None
    )
    """
    ID of immediate parent organization
    """

    refund_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="RefundId")] = pydantic.Field(
        default=None
    )
    """
    Identifier of refund transaction linked to this payment
    """

    returned_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="ReturnedId")] = pydantic.Field(
        default=None
    )
    """
    Identifier of return/chargeback transaction linked to this payment
    """

    chargeback_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="ChargebackId")] = (
        pydantic.Field(default=None)
    )
    """
    Identifier of chargeback transaction
    """

    retrieval_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="RetrievalId")] = (
        pydantic.Field(default=None)
    )
    """
    Identifier of retrieval request
    """

    trans_additional_data: typing_extensions.Annotated[
        typing.Optional[typing.Optional[typing.Any]], FieldMetadata(alias="TransAdditionalData")
    ] = pydantic.Field(default=None)
    """
    Additional transaction data
    """

    invoice_data: typing_extensions.Annotated[typing.Optional[BillData], FieldMetadata(alias="invoiceData")] = (
        pydantic.Field(default=None)
    )
    """
    Associated invoice data
    """

    entrypage_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="EntrypageId")] = (
        pydantic.Field(default=None)
    )
    """
    Internal reference ID to the payment page capturing the payment
    """

    external_paypoint_id: typing_extensions.Annotated[
        typing.Optional[ExternalPaypointId], FieldMetadata(alias="externalPaypointID")
    ] = pydantic.Field(default=None)
    """
    A custom identifier for the paypoint
    """

    transaction_time: typing_extensions.Annotated[
        typing.Optional[Datetimenullable], FieldMetadata(alias="TransactionTime")
    ] = pydantic.Field(default=None)
    """
    Transaction date and time, in UTC
    """

    customer: typing_extensions.Annotated[
        typing.Optional[QueryTransactionPayorData], FieldMetadata(alias="Customer")
    ] = pydantic.Field(default=None)
    """
    Customer information associated with the transaction
    """

    split_funding_instructions: typing_extensions.Annotated[
        typing.Optional[SplitFunding], FieldMetadata(alias="splitFundingInstructions")
    ] = pydantic.Field(default=None)
    """
    Split funding instructions for the transaction
    """

    cfee_transactions: typing_extensions.Annotated[
        typing.Optional[typing.List[QueryCFeeTransaction]], FieldMetadata(alias="CfeeTransactions")
    ] = pydantic.Field(default=None)
    """
    Service Fee or sub-charge transactions associated to the main transaction
    """

    transaction_events: typing_extensions.Annotated[
        typing.Optional[typing.List[QueryTransactionEvents]], FieldMetadata(alias="TransactionEvents")
    ] = pydantic.Field(default=None)
    """
    Events associated with this transaction
    """

    pending_fee_amount: typing_extensions.Annotated[
        typing.Optional[PendingFeeAmount], FieldMetadata(alias="PendingFeeAmount")
    ] = pydantic.Field(default=None)
    """
    Pending fee amount for the transaction
    """

    risk_flagged: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="RiskFlagged")] = (
        pydantic.Field(default=None)
    )
    """
    Indicates if the transaction was flagged for risk
    """

    risk_flagged_on: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="RiskFlaggedOn")] = (
        pydantic.Field(default=None)
    )
    """
    Timestamp when the transaction was flagged for risk
    """

    risk_status: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="RiskStatus")] = pydantic.Field(
        default=None
    )
    """
    Current risk status of the transaction
    """

    risk_reason: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="RiskReason")] = pydantic.Field(
        default=None
    )
    """
    Reason for risk flagging
    """

    risk_action: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="RiskAction")] = pydantic.Field(
        default=None
    )
    """
    Action taken due to risk assessment
    """

    risk_action_code: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="RiskActionCode")] = (
        pydantic.Field(default=None)
    )
    """
    Numeric code representing the risk action
    """

    device_id: typing_extensions.Annotated[typing.Optional[Device], FieldMetadata(alias="DeviceId")] = pydantic.Field(
        default=None
    )
    """
    Identifier of registered cloud device used in the transaction
    """

    ach_sec_code: typing_extensions.Annotated[typing.Optional[AchSecCode], FieldMetadata(alias="AchSecCode")] = (
        pydantic.Field(default=None)
    )
    """
    Standard Entry Class (SEC) code for ACH transactions
    """

    ach_holder_type: typing_extensions.Annotated[
        typing.Optional[AchHolderType], FieldMetadata(alias="AchHolderType")
    ] = pydantic.Field(default=None)
    """
    Type of ACH account holder (personal or business)
    """

    ip_address: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="IPAddress")] = pydantic.Field(
        default=None
    )
    """
    IP address of the transaction source
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
