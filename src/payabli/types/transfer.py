# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .transfer_event import TransferEvent


class Transfer(UniversalBaseModel):
    transfer_id: typing_extensions.Annotated[int, FieldMetadata(alias="transferId")] = pydantic.Field()
    """
    The transfer ID.
    """

    paypoint_id: typing_extensions.Annotated[int, FieldMetadata(alias="paypointId")] = pydantic.Field()
    """
    The ID of the paypoint the transfer belongs to.
    """

    batch_number: typing_extensions.Annotated[str, FieldMetadata(alias="batchNumber")] = pydantic.Field()
    """
    The batch number associated with the transfer.
    """

    transfer_identifier: typing_extensions.Annotated[str, FieldMetadata(alias="transferIdentifier")] = pydantic.Field()
    """
    Unique identifier for the transfer.
    """

    batch_id: typing_extensions.Annotated[int, FieldMetadata(alias="batchId")] = pydantic.Field()
    """
    The ID of the batch the transfer belongs to.
    """

    transfer_date: typing_extensions.Annotated[str, FieldMetadata(alias="transferDate")] = pydantic.Field()
    """
    Date when the transfer occurred.
    """

    processor: str = pydantic.Field()
    """
    The payment processor used for the transfer.
    """

    transfer_status: typing_extensions.Annotated[int, FieldMetadata(alias="transferStatus")] = pydantic.Field()
    """
    The current status of the transfer.
    """

    gross_amount: typing_extensions.Annotated[float, FieldMetadata(alias="grossAmount")] = pydantic.Field()
    """
    Gross batch is the total amount of the payments grouped in the batch. This amount includes service fees.
    """

    charge_back_amount: typing_extensions.Annotated[float, FieldMetadata(alias="chargeBackAmount")] = pydantic.Field()
    """
    Amount of chargebacks to be deducted from batch.
    """

    returned_amount: typing_extensions.Annotated[float, FieldMetadata(alias="returnedAmount")] = pydantic.Field()
    """
    Amount of ACH returns to be deducted from batch.
    """

    hold_amount: typing_extensions.Annotated[float, FieldMetadata(alias="holdAmount")] = pydantic.Field()
    """
    Amount being held for fraud or risk concerns.
    """

    released_amount: typing_extensions.Annotated[float, FieldMetadata(alias="releasedAmount")] = pydantic.Field()
    """
    Amount of previously held funds that have been released after a risk review.
    """

    billing_fees_amount: typing_extensions.Annotated[float, FieldMetadata(alias="billingFeesAmount")] = pydantic.Field()
    """
    Amount of charges and fees applied for services and transactions.
    """

    third_party_paid_amount: typing_extensions.Annotated[float, FieldMetadata(alias="thirdPartyPaidAmount")] = (
        pydantic.Field()
    )
    """
    Amount of payments captured in the batch cycle that are deposited separately. For example, checks or cash payments recorded in the batch but not deposited via Payabli, or card brands making a direct transfer in certain situations.
    """

    adjustments_amount: typing_extensions.Annotated[float, FieldMetadata(alias="adjustmentsAmount")] = pydantic.Field()
    """
    Amount of corrections applied to Billing & Fees charges.
    """

    net_transfer_amount: typing_extensions.Annotated[float, FieldMetadata(alias="netTransferAmount")] = pydantic.Field()
    """
    The net transfer amount after all deductions and additions.
    """

    events_data: typing_extensions.Annotated[typing.List[TransferEvent], FieldMetadata(alias="eventsData")] = (
        pydantic.Field()
    )
    """
    List of events associated with the transfer.
    """

    messages: typing.List[str] = pydantic.Field()
    """
    List of messages related to the transfer.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
