# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class VendorPaymentMethod_Managed(UniversalBaseModel):
    """
    Object containing details about the payment method to use for the payout.
    """

    method: typing.Literal["managed"] = "managed"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class VendorPaymentMethod_Vcard(UniversalBaseModel):
    """
    Object containing details about the payment method to use for the payout.
    """

    method: typing.Literal["vcard"] = "vcard"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class VendorPaymentMethod_Ach(UniversalBaseModel):
    """
    Object containing details about the payment method to use for the payout.
    """

    method: typing.Literal["ach"] = "ach"
    stored_method_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="storedMethodId")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class VendorPaymentMethod_Check(UniversalBaseModel):
    """
    Object containing details about the payment method to use for the payout.
    """

    method: typing.Literal["check"] = "check"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


VendorPaymentMethod = typing.Union[
    VendorPaymentMethod_Managed, VendorPaymentMethod_Vcard, VendorPaymentMethod_Ach, VendorPaymentMethod_Check
]
