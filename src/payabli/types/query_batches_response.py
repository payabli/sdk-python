# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .batch_summary import BatchSummary
from .query_batches_response_records_item import QueryBatchesResponseRecordsItem


class QueryBatchesResponse(UniversalBaseModel):
    """
    Response body for queries about batches.
    """

    records: typing_extensions.Annotated[typing.List[QueryBatchesResponseRecordsItem], FieldMetadata(alias="Records")]
    summary: typing_extensions.Annotated[BatchSummary, FieldMetadata(alias="Summary")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
