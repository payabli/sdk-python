# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class TransferEvent(UniversalBaseModel):
    description: str = pydantic.Field()
    """
    Description of the transfer event.
    """

    event_time: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="eventTime")] = pydantic.Field()
    """
    Date and time when the transfer event occurred.
    """

    ref_data: typing_extensions.Annotated[str, FieldMetadata(alias="refData")] = pydantic.Field()
    """
    Reference data associated with the transfer event.
    """

    extra_data: typing_extensions.Annotated[str, FieldMetadata(alias="extraData")] = pydantic.Field()
    """
    Additional data associated with the transfer event.
    """

    source: str = pydantic.Field()
    """
    Source of the transfer event.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
